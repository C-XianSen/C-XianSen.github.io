{"meta":{"title":"Blog","subtitle":null,"description":null,"author":"不知晓","url":"http://yoursite.com"},"pages":[],"posts":[{"title":"Vue.js + Koa2 移动电商实战（1）","slug":"smile","date":"2019-02-25T02:08:16.000Z","updated":"2019-02-25T08:53:52.528Z","comments":true,"path":"2019/02/25/smile/","link":"","permalink":"http://yoursite.com/2019/02/25/smile/","excerpt":"","text":"开始跟着胖老师来重温一下丢失已久的Vue了(emmm也就半年而已)，下面开始巩固学习了。 前端环境的搭建1.建立前端文件夹在要建立项目文件的文件夹下创建新的文件夹，并在代码工具中打开，我用的是vscode。 2.项目目录的创建再生成项目目录前，必须要有npm，可在终端命令行（即Git Bush）上运行以下代码，查看npm的版本号： 1$ npm -v 然后在全局下安装vue-cli，在终端命令行终端命令行（即Git Bush）上运行以下代码： 1$ npm install vue-cli -g 最后在终端命令行（即Git Bush）上运行以下代码，生成项目目录 1$ vue init webpack 3.测试环境是否安装成功在终端命令行（即Git Bush）下运行： 1$ npm run dev 运行完成后，终端命令行（即Git Bush）上会显示一个本地地址，可按住Ctrl + 鼠标左击 快捷打开，如在浏览器打开Vue页面成功，说明你的项目初始化成功。 优雅的引入Vant组件库1.安装Vant在终端命令行（即Git Bush）中运行以下代码进行安装 12$ npm i vant -s // 简写写法$ npm install vant --save // 完整写法 如果网络速度很慢的话，可以使用淘宝的源，但不建议使用cnpm来进行安装（我也是这么认为的，坑挺多的）。如不想每次都加上淘宝上的源，可以自行百度设置默认淘宝的源。 1$ npm install vant --save --registry=https://registry.npm.taobao.org 安装完成后，我们可以在package.json里看到安装的依赖和版本。（我现在用的都是最新版，跟胖老师用的版本也没差多少，如果时间太久远了，估计会有坑） 2.常见引入Vant的方法安装vant后，可以使用常见的全局引入方式，直接在src/main.js中： 1234import Vant from 'vant'import 'vant/lib/vant-css/index.css'Vue.use(vant) 虽然是简单的三行代码就把Vant引入了，但是不够优雅，会在最后打包发布时增加包的大小，Vue的SPA首屏打开时本来就有点慢，所以不建议。 3.优雅的引入Vantvant支持babel-plugin-import引入，它可以让我们按需引入组件模块，并且不用管理样式，现在已是Vue项目组件库的主流引入方法。在终端命令行（即Git Bush）中运行以下命令进行安装： 12$ npm i babel-plugin-import -D // 简写$ npm install babel-plugin-import --save-dev // 完整 安装完成后我们在.babelrc配置plugins（插件） 12345\"plugins\": [ \"transform-vue-jsx\", \"transform-runtime\", [\"import\", &#123;\"libraryName\": \"vant\", \"style\": true&#125;]] 4.按需引入、使用Vant组件设置好.babelrc后，我们现在就可以按需引入Vant框架了。比如我们现在需要引入一个Button组件，在src/main.js里加入以下代码： 123import &#123; Button &#125; from 'vant'Vue.use(Button) 引入完成后，我们可以在需要组件的页面中使用了 1&lt;van-button type=\"primary\"&gt;主要按钮&lt;/van-button&gt; 移动端屏幕适配1.常见移动web布局适配- 固定高度，宽度百分比：这种方式只适合简单要求不高的webApp，几乎达不到大型项目的需求。 - Media Query(媒体查询)：现在比较主流的适配方式，比如我们常见的样式框架Bootstrap就是靠这个起家的，它能完成大部分项目需求，但是编写过于复杂。 - flex布局：主流的布局方式，不仅适用于移动web，PC网页上也表现良好，这也是现在工作中用得最多的布局方式。接下来将采用flex + rem的方式进行布局和完成移动端的适配。 - rem适配原理：将px替换成rem，动态修改html的font-size适配。 2.JS控制适配屏幕三行js代码完成适配： 12345678// 得到手机屏幕的宽度let htmlWidth = document.documentElement.clientWidth || document.body.clientWidth;// 得到html的Dom元素let htmlDom = document.getElementsByTagName('html')[0];// 设置跟元素字体大小htmlDom.style.fontSize = htmlWidth/20 + 'px';","categories":[],"tags":[]},{"title":"记一次Hexo博客搭建. 和第一次发博文","slug":"first-blog-post","date":"2019-02-14T07:53:02.000Z","updated":"2019-02-16T03:21:02.211Z","comments":true,"path":"2019/02/14/first-blog-post/","link":"","permalink":"http://yoursite.com/2019/02/14/first-blog-post/","excerpt":"","text":"最近准备辞职，想着跟胖老师重温一下vue，主要是现在的公司用的都是jquery或js，没有用到别的啥框架了。然后想要加深一下印象并方便以后自己查看，决定写博记录一下的(/ω＼)……发现之前给弄的Hexo博客忘记扔哪了，就重新来一次，还好找到一个很的一篇文可以学习(＾－＾)V。 博客搭建环境 Node.js(如何下载和安装，到文末的参考地址上查看) Git(如何下载和安装，到文末的参考地址上查看) 安装Hexo，在命令行(即Git Bush)上运行以下命令： 1$ npm install -g hexo-cli 初始化Hexo，在命令行(即Git Bush)上依次运行以下命令： 下面命令中的是创建Hexo文件名，路径为站点目录 123$ hexo init &lt;name&gt;$ cd &lt;name&gt;$ npm install 上面的三条命令是创建Hexo博客文档，会产生下面这些文件和文件夹： 12345678.├── _config.yml├── package.json├── scaffolds├── source| ├── _drafts| └── _posts└── themes 注： hexo的相关命令均在站点根目录下，用Git Bash运行。 站点配置文件：站点目录下的_config.yml。 路径为_config.yml 主题配置文件：站点目录下的themes文件夹下的，主题文件夹下的_config.yml。 路径为\\themes\\主题文件夹_config.yml 在站点目录路径下，输入命令行(即Git Bash)输入以下命令，启动服务器。 1$ hexo server 浏览器访问网站：http://localhost:4000/ 好了，现在你的Hexo博客已经搭建在本地了。 GitHubPages 创建一个GitHub账号 创建一个仓库，仓库名为：.github.io 将本地Hexo博客推送到GitHubPages 安装hexo-deployer-git插件。在命令行(即Git Bush)运行以下命令即可： 1$ npm install hexo-deployer-git --save 添加SSH key。 创建一个SSH key。在命令行(即Git Bush)运行以下命令，回车三下即可： 1$ ssh-keygen -t rsa -C \"邮箱地址\" 添加到GitHub。复制密匙文件内容（路径形如C:\\Users\\Administrator.ssh\\id_rsa.pub），粘贴到New SSH key即可。 测试是否添加成功。在命令行(即Git Bush)依次运行以下命令，返回”You’ve successfully authenticated”即成功：12$ ssh -T git@github.com$ yes 修改_config.yml(在站点目录下)，文件末尾修改为： 123456# Deployment## Docs: https://hexo.io/docs/deployment.htmldeploy: type: git repo: git@github.com:&lt;Github账号名称&gt;/&lt;Github账号名称&gt;.github.io.git branch: master 注意：上面仓库地址写ssh地址，不写http地址。 推送到GitHubPages。在命令行(即Git Bush)依次运行以下命令，返回INFO Deploy done：git即成功推送：12$ hexo g$ hexo d 命令运行完后，浏览器访问网址：http://&lt;GitHub账号名称&gt;.github.io 现在你的Hexo博客已经搭建在GitHubPages，域名为http://&lt;GitHub账号名称&gt;.github.io。 本文内容参考自：https://www.simon96.online/2018/10/12/hexo-tutorial/","categories":[],"tags":[]},{"title":"Hello World","slug":"hello-world","date":"2019-02-14T03:29:17.497Z","updated":"2019-02-14T03:29:17.497Z","comments":true,"path":"2019/02/14/hello-world/","link":"","permalink":"http://yoursite.com/2019/02/14/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}]}